Practical Machine Learning Week 2 Quiz
=======================================
Q1
Load the Alzheimer's disease data using the commands:

library(AppliedPredictiveModeling)
data(AlzheimerDisease)

Which of the following commands will create non-overlapping training and test sets with about 50% of the observations assigned to each?

---- my answer -------
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]


adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]


adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]


=======================================
Q2 
Load the cement data using the commands:

> library(AppliedPredictiveModeling)
> data(concrete)
> library(caret)
> set.seed(1000)
> inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
> training = mixtures[ inTrain,]
> testing = mixtures[-inTrain,]

Make a plot of the outcome (CompressiveStrength) versus the index of the samples. 
Color by each of the variables in the data set 
- you may find the cut2() function in the Hmisc package useful for turning continuous covariates into factors. 
What do you notice in these plots?

The outcome variable is highly correlated with FlyAsh.

There is a non-random pattern in the plot of the outcome versus index that is perfectly explained by the FlyAsh variable.

my answer --> There is a non-random pattern in the plot of the outcome versus index that does not appear to be perfectly explained by any predictor suggesting a variable may be missing.

There is a non-random pattern in the plot of the outcome versus index that is perfectly explained by the Age variable so there may be a variable missing.
------------------------------------
## plot of the outcome (CompressiveStrength) versus the index of the samples
plot(training$CompressiveStrength, pch=19) ## index plot
## Cement
cutCement<-cut2(training$Cement,g=3)
plot(training$CompressiveStrength, col=cutCement) ## colored scatter plot
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE) ## control size of plot
legend("right", levels(cutCement), fill = unique(cutCement)) ## legend added
## FlyAsh
cutFlyAsh<-cut2(training$FlyAsh,g=3)
par(mar=c(5, 5, 3, 3), xpd=FALSE) ## set margins
plot(training$CompressiveStrength, col=cutFlyAsh) ## colored graph
legend("topright", levels(cutFlyAsh), fill = unique(cutFlyAsh)) ## legend 
## Age
cutAge<-cut2(training$Age,g=4)
plot(training$CompressiveStrength, col=cutAge) ## colored scatter plot
legend("topright", levels(cutAge), fill = unique(cutAge))

plot(training$CompressiveStrength, col=training$BlastFurnaceSlag) ## nothing
plot(training$CompressiveStrength, pch=19, col=training$Water) ## nothing
plot(training$CompressiveStrength, pch=19, col=training$Superplasticizer) ## nothing
plot(training$CompressiveStrength, pch=19, col=training$CourseAggregate) ## nothing
plot(training$CompressiveStrength, pch=19, col=training$FineAggregate) ## nothing

=======================================
Q3 Load the cement data using the commands:

library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]

Make a histogram and confirm the SuperPlasticizer variable is skewed. 
Normally you might use the log transform to try to make the data more symmetric. Why would that be a poor choice for this variable?

The log transform does not reduce the skewness of the non-zero values of SuperPlasticizer

The SuperPlasticizer data include negative values so the log transform can not be performed.

my answer --> There are values of zero so when you take the log() transform those values will be -Inf.

The log transform produces negative values which can not be used by some classifiers.

------------------------------------
## Density plot
qplot(Superplasticizer, data=training, geom="density")
## Log transform
qplot(log10(Superplasticizer), data=training, geom="density")
Warning message:
Removed 288 rows containing non-finite values (stat_density).
=======================================
Q4 
Load the Alzheimer's disease data using the commands:

library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]

Find all the predictor variables in the training set that begin with IL. 
Perform principal components on these variables with the preProcess() function from the caret package. 
Calculate the number of principal components needed to capture 90% of the variance. How many are there?

my answer --> 9

10

5

12

------------------------------------
colnames(training)
IL predictors are columns 58-69
colnames(training[,58:69])

typeColor<-((training$diagnosis=="Impaired")*1 +1)
preProc<-preProcess(training[,58:69], method="pca", thresh=0.9) ## preComp = default
## predict selects the predictive variables
impairedPC<-predict(preProc, training[,58:69]) 
## so the number of components looks like 10 (number of vars)
## this plot is not very inforemational...
plot(impairedPC[,1],impairedPC[,2],col=typeColor)

- second try
# Get columns starting with IL.
data <- training[, grep('^IL', names(training))]
# Run PCA and print out number of components needed (9).
preProcess(data, method='pca', thresh=0.9)

=======================================
Q5
Load the Alzheimer's disease data using the commands:

library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]

Create a training data set consisting of only the predictors with variable names beginning with IL and the diagnosis. 
Build two predictive models, one using the predictors as they are and one using PCA with principal components explaining 80% of the variance in the predictors. 
Use method="glm" in the train function.

What is the accuracy of each method in the test set? 
Which is more accurate?

Non-PCA Accuracy: 0.72
PCA Accuracy: 0.65

Non-PCA Accuracy: 0.91
PCA Accuracy: 0.93

Non-PCA Accuracy: 0.72
PCA Accuracy: 0.71

my answer --> Non-PCA Accuracy: 0.65
PCA Accuracy: 0.72

------------------------------------
trainingIL<-subset(training[,c(1,58:69)])
# Create training and testing set.
set.seed(3433)
inTrain = createDataPartition(trainingIL$diagnosis, p = 3/4)[[1]]
training = trainingIL[inTrain, ]
testing = trainingIL[-inTrain, ]

## non-PCA
set.seed(3433)
modFit<-train(diagnosis~.,data=training, method="glm")
print(modFit)
# Get result on testing set and display accuracy.
predictions <- predict(modFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
Accuracy : 0.6452 

## PCA
set.seed(3433)
modFit2 <- train(diagnosis ~ ., method="glm", preProcess="pca",data=training, 
            trControl = trainControl(preProcOptions = list(thresh = 0.8)))
# Get result on testing set and display accuracy.
predictions2 <- predict(modFit2, newdata = testing)
confusionMatrix(predictions2, testing$diagnosis)
Accuracy : 0.6774

preProc<-preProcess(training[,-1], method="pca")
trainPC<-predict(preProc,trainingIL[,-1])
modelFit<-train(trainingIL$diagnosis~.,method="glm",data=trainPC)

=======================================
